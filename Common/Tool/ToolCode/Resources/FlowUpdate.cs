// IMPORTANT: THIS IS MACHINE-GENERATED CODE
// PLEASE DO NOT EDIT
// Generated by Stateless Designer
// http://statelessdesigner.codeplex.com/

using Stateless;

namespace QuantEdge.Worker.RiskManager.Processor.Update%EntityName%Request
{
  public class Flow_Update%EntityName%Request
  {
    public delegate void UnhandledTriggerDelegate(State state, Trigger trigger);
    public delegate void EntryExitDelegate();
    public delegate bool GuardClauseDelegate();

    public enum Trigger
    {
      Next,
      Error,
    }

    public enum State
    {
      Input,
      CheckValidate,
      Process,
      Output,
    }

    private readonly StateMachine<State, Trigger> stateMachine = null;

    public EntryExitDelegate OnInputEntry = null;
    public EntryExitDelegate OnInputExit = null;
    public EntryExitDelegate OnCheckValidateEntry = null;
    public EntryExitDelegate OnCheckValidateExit = null;
    public EntryExitDelegate OnProcessEntry = null;
    public EntryExitDelegate OnProcessExit = null;
    public EntryExitDelegate OnOutputEntry = null;
    public EntryExitDelegate OnOutputExit = null;
    public GuardClauseDelegate GuardClauseFromInputToCheckValidateUsingTriggerNext = null;
    public GuardClauseDelegate GuardClauseFromCheckValidateToProcessUsingTriggerNext = null;
    public GuardClauseDelegate GuardClauseFromCheckValidateToOutputUsingTriggerError = null;
    public GuardClauseDelegate GuardClauseFromProcessToOutputUsingTriggerNext = null;
    public UnhandledTriggerDelegate OnUnhandledTrigger = null;

    public Flow_Update%EntityName%Request()
    {
      stateMachine = new StateMachine<State, Trigger>(State.Input);
      stateMachine.Configure(State.Input)
        .OnEntry(() => { if (OnInputEntry != null) OnInputEntry(); })
        .OnExit(() => { if (OnInputExit != null) OnInputExit(); })
        .PermitIf(Trigger.Next, State.CheckValidate , () => { if (GuardClauseFromInputToCheckValidateUsingTriggerNext != null) return GuardClauseFromInputToCheckValidateUsingTriggerNext(); return true; } )
      ;
      stateMachine.Configure(State.CheckValidate)
        .OnEntry(() => { if (OnCheckValidateEntry != null) OnCheckValidateEntry(); })
        .OnExit(() => { if (OnCheckValidateExit != null) OnCheckValidateExit(); })
        .PermitIf(Trigger.Next, State.Process , () => { if (GuardClauseFromCheckValidateToProcessUsingTriggerNext != null) return GuardClauseFromCheckValidateToProcessUsingTriggerNext(); return true; } )
        .PermitIf(Trigger.Error, State.Output , () => { if (GuardClauseFromCheckValidateToOutputUsingTriggerError != null) return GuardClauseFromCheckValidateToOutputUsingTriggerError(); return true; } )
      ;
      stateMachine.Configure(State.Process)
        .OnEntry(() => { if (OnProcessEntry != null) OnProcessEntry(); })
        .OnExit(() => { if (OnProcessExit != null) OnProcessExit(); })
        .PermitIf(Trigger.Next, State.Output , () => { if (GuardClauseFromProcessToOutputUsingTriggerNext != null) return GuardClauseFromProcessToOutputUsingTriggerNext(); return true; } )
      ;
      stateMachine.Configure(State.Output)
        .OnEntry(() => { if (OnOutputEntry != null) OnOutputEntry(); })
        .OnExit(() => { if (OnOutputExit != null) OnOutputExit(); })
      ;
      stateMachine.OnUnhandledTrigger((state, trigger) => { if (OnUnhandledTrigger != null) OnUnhandledTrigger(state, trigger); });
    }

    public bool TryFireTrigger(Trigger trigger)
    {
      if (!stateMachine.CanFire(trigger))
      {
        return false;
      }
      stateMachine.Fire(trigger);
      return true;
    }

    public State GetState
    {
      get
      {
        return stateMachine.State;
      }
    }
  }
}