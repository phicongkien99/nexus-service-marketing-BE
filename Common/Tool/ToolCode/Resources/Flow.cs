// IMPORTANT: THIS IS MACHINE-GENERATED CODE
// PLEASE DO NOT EDIT
// Generated by Stateless Designer
// http://statelessdesigner.codeplex.com/

using Stateless;

namespace QuantEdge.Worker.DataProviderManager.Processor.GetList%EntityName%Request
{
  public class Flow_GetList%EntityName%Request
  {
    public delegate void UnhandledTriggerDelegate(State state, Trigger trigger);
    public delegate void EntryExitDelegate();
    public delegate bool GuardClauseDelegate();

    public enum Trigger
    {
      Next,
    }

    public enum State
    {
      ListRequest,
      ProcessList,
      ListResponse,
    }

    private readonly StateMachine<State, Trigger> stateMachine = null;

    public EntryExitDelegate OnListRequestEntry = null;
    public EntryExitDelegate OnListRequestExit = null;
    public EntryExitDelegate OnProcessListEntry = null;
    public EntryExitDelegate OnProcessListExit = null;
    public EntryExitDelegate OnListResponseEntry = null;
    public EntryExitDelegate OnListResponseExit = null;
    public GuardClauseDelegate GuardClauseFromListRequestToProcessListUsingTriggerNext = null;
    public GuardClauseDelegate GuardClauseFromProcessListToListResponseUsingTriggerNext = null;
    public UnhandledTriggerDelegate OnUnhandledTrigger = null;

    public Flow_GetList%EntityName%Request()
    {
      stateMachine = new StateMachine<State, Trigger>(State.ListRequest);
      stateMachine.Configure(State.ListRequest)
        .OnEntry(() => { if (OnListRequestEntry != null) OnListRequestEntry(); })
        .OnExit(() => { if (OnListRequestExit != null) OnListRequestExit(); })
        .PermitIf(Trigger.Next, State.ProcessList , () => { if (GuardClauseFromListRequestToProcessListUsingTriggerNext != null) return GuardClauseFromListRequestToProcessListUsingTriggerNext(); return true; } )
      ;
      stateMachine.Configure(State.ProcessList)
        .OnEntry(() => { if (OnProcessListEntry != null) OnProcessListEntry(); })
        .OnExit(() => { if (OnProcessListExit != null) OnProcessListExit(); })
        .PermitIf(Trigger.Next, State.ListResponse , () => { if (GuardClauseFromProcessListToListResponseUsingTriggerNext != null) return GuardClauseFromProcessListToListResponseUsingTriggerNext(); return true; } )
      ;
      stateMachine.Configure(State.ListResponse)
        .OnEntry(() => { if (OnListResponseEntry != null) OnListResponseEntry(); })
        .OnExit(() => { if (OnListResponseExit != null) OnListResponseExit(); })
      ;
      stateMachine.OnUnhandledTrigger((state, trigger) => { if (OnUnhandledTrigger != null) OnUnhandledTrigger(state, trigger); });
    }

    public bool TryFireTrigger(Trigger trigger)
    {
      if (!stateMachine.CanFire(trigger))
      {
        return false;
      }
      stateMachine.Fire(trigger);
      return true;
    }

    public State GetState
    {
      get
      {
        return stateMachine.State;
      }
    }
  }
}